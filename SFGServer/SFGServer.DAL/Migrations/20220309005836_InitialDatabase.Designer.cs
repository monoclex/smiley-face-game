// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SFGServer.DAL;

#nullable disable

namespace SFGServer.DAL.Migrations
{
    [DbContext(typeof(SfgContext))]
    [Migration("20220309005836_InitialDatabase")]
    partial class InitialDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SFGServer.DAL.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<int>("EnergyRegenerationRateMs")
                        .HasColumnType("integer")
                        .HasColumnName("energyRegenerationRateMs");

                    b.Property<int>("LastEnergyAmount")
                        .HasColumnType("integer")
                        .HasColumnName("lastEnergyAmount");

                    b.Property<int>("MaxEnergy")
                        .HasColumnType("integer")
                        .HasColumnName("maxEnergy");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("password");

                    b.Property<long>("TimeEnergyWasAtAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("timeEnergyWasAtAmount");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Username" }, "UQ_41dfcb70af895ddf9a53094515b")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ_4c8f96ccf523e9a3faefd5bdd4c")
                        .IsUnique();

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("SFGServer.DAL.Models.Migration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.ToTable("migrations", (string)null);
                });

            modelBuilder.Entity("SFGServer.DAL.Models.ShopItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Purchased")
                        .HasColumnType("integer")
                        .HasColumnName("purchased");

                    b.Property<int>("ShopItemId")
                        .HasColumnType("integer")
                        .HasColumnName("shopItemId");

                    b.Property<int>("SpentEnergy")
                        .HasColumnType("integer")
                        .HasColumnName("spentEnergy");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId", "ShopItemId" }, "user_to_item")
                        .IsUnique();

                    b.ToTable("shop_item", (string)null);
                });

            modelBuilder.Entity("SFGServer.DAL.Models.TypeormMetadatum", b =>
                {
                    b.Property<string>("Database")
                        .HasColumnType("character varying")
                        .HasColumnName("database");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Schema")
                        .HasColumnType("character varying")
                        .HasColumnName("schema");

                    b.Property<string>("Table")
                        .HasColumnType("character varying")
                        .HasColumnName("table");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.ToTable("typeorm_metadata", (string)null);
                });

            modelBuilder.Entity("SFGServer.DAL.Models.World", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("ownerId");

                    b.Property<string>("RawWorldData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rawWorldData");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.Property<int>("WorldDataVersion")
                        .HasColumnType("integer")
                        .HasColumnName("worldDataVersion");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("world", (string)null);
                });

            modelBuilder.Entity("SFGServer.DAL.Models.ShopItem", b =>
                {
                    b.HasOne("SFGServer.DAL.Models.Account", "User")
                        .WithMany("ShopItems")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_a4fd65108e87639f9b2c626bbff");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SFGServer.DAL.Models.World", b =>
                {
                    b.HasOne("SFGServer.DAL.Models.Account", "Owner")
                        .WithMany("Worlds")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_74411484c66ad301185b4dadab3");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SFGServer.DAL.Models.Account", b =>
                {
                    b.Navigation("ShopItems");

                    b.Navigation("Worlds");
                });
#pragma warning restore 612, 618
        }
    }
}
